<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[每月一語]]></title>
      <url>https://Jintin.github.io/blog/blog/2016/02/28/monthly-github/</url>
      <content type="html"><![CDATA[<p>當工程師好幾年了，但一直都只專注寫Java，雖然對Java沒什麼特別不滿意的地方，但偶而也想多試試其它語言來增加自己的視野，於是大概在半年前開始給自己一個挑戰，每個月用一個不熟的語言寫個小工具分享到github上，很快地累積了好幾個小專案，分享自己的心得也順便介紹這些工具給大家，希望對大家有所幫助。</p><h2 id="jgit-Ruby"><a href="#jgit-Ruby" class="headerlink" title="jgit (Ruby)"></a>jgit (Ruby)</h2><p>git是個很高效好用的版本控制工具，但如果同時有多個專案使用上有點不方便。jgit就是想要解決這個情境，對git做擴展，解決在任意目錄下查詢任意一個或多個專案的git狀態，簡單說就是把git command分配到很多個目錄下執行。<br>比如說 <code>jgit status</code> 可以取得目前群組的所有專案之 <code>git status</code> 的結果，如果同時要開發或維護多個專案的時候很方便。</p><p>範例如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ jgit ls</span><br><span class="line">A: /Users/Jintin/Downloads/sample/sampleA</span><br><span class="line">B: /Users/Jintin/Desktop/sample/sampleB</span><br><span class="line"></span><br><span class="line">$ jgit status</span><br><span class="line"></span><br><span class="line"> - Task:A</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line"> - Task:B</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">	modified:   newFile.json</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure></p><p>心得: 寫ruby一開始的時候蠻不習慣的，少了型別、不用compile、語法也很不習慣。但慢慢覺得動態語言在小型專案下真的可以很方便解決很多問題，<code>gem</code> 的設計很棒，不用compile習慣後開發速度也提升不少。</p><p>更多資訊可以參考 <a href="https://github.com/Jintin/jgit" target="_blank" rel="external">https://github.com/Jintin/jgit</a></p><h2 id="transai-JavaScript"><a href="#transai-JavaScript" class="headerlink" title="transai (JavaScript)"></a>transai (JavaScript)</h2><p>transai 是處理Android, iOS多國語言的工具，可以在Terminal把這二個平台的語言檔解析出來合併為csv格式，等翻譯完了之後再轉回各自的資料夾中。</p><p>範例如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ transai load <span class="_">-a</span> ~/android -i ~/ios --from en --to de -c ~/strings.csv</span><br><span class="line">$ transai save <span class="_">-a</span> ~/android -i ~/ios --from en --to de -c ~/strings.csv</span><br></pre></td></tr></table></figure></p><p>心得: JavaScript跟Ruby一樣是動態但語法平易近人多了，而且 <code>npm</code> 、 <code>node</code> 的設計又更完善方便，是很好入門的一款語言，在各領域也都有很好的發揮機會，雖然不想承認但的確是最有機會統一程式語言的語言。</p><p>更多資訊可以參考 <a href="https://github.com/Jintin/transai" target="_blank" rel="external">https://github.com/Jintin/transai</a></p><h2 id="andle-Python"><a href="#andle-Python" class="headerlink" title="andle (Python)"></a>andle (Python)</h2><p>Android Studio問世之後，大家一定很喜歡可以把dependency設定在build.gradle的特性，但相對的這個檔案的管理就變成一門學問了，你知道哪些library有更新的版本嗎？就算知道如果你有十個專案你要一個一個改嗎？<br>andle 就是幫你解決dependency version的工具，可以直接在Terminal更新所有library為最新版本，如果你比較嚴謹也可以加上 <code>-d</code> 只會列出新版版號不會修改。</p><p>範例如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ andle update <span class="_">-d</span> -g -r</span><br><span class="line">check ./build.gradle</span><br><span class="line">com.android.tools.build:gradle: 2.0.0-beta4 -&gt; 2.0.0-beta6</span><br><span class="line">check ./A/build.gradle</span><br><span class="line">com.android.support:cardview-v7: 23.1.1 -&gt; 23.2.0</span><br><span class="line">check ./B/build.gradle</span><br><span class="line">ok</span><br><span class="line">check ./C/build.gradle</span><br><span class="line">com.android.support:support-v4: 23.1.1 -&gt; 23.2.0</span><br><span class="line">com.android.support:design: 23.1.1 -&gt; 23.2.0</span><br><span class="line">check ./gradle/wrapper/gradle-wrapper.properties</span><br><span class="line">ok</span><br></pre></td></tr></table></figure></p><p>心得: 又是一門動態語言，Terminal幾乎都是動態語言的天下，語法上最大不習慣就是用縮排取代括弧，其他結構上跟Ruby有點類似，有點痛苦是Python2.X跟Python3.X有大改版，所以要二種都測試過比較保險，這種新版本一直出來，舊的版本又不能放棄的感覺跟Android實在是太契合了。</p><p>更多資訊可以參考 <a href="https://github.com/Jintin/andle" target="_blank" rel="external">https://github.com/Jintin/andle</a></p><h2 id="Swimat-Objective-C"><a href="#Swimat-Objective-C" class="headerlink" title="Swimat (Objective-C)"></a>Swimat (Objective-C)</h2><p><img src="https://raw.githubusercontent.com/Jintin/Swimat/master/README/preview.gif" alt=""><br>Swift是我除了Java以外很喜歡的一個語言，也是我接觸iOS開發的第一個語言。但Xcode對它的支援其實還蠻不足的，除了很慢連個基本的自動排版都沒有。<br>Swimat就是一個簡單的Swift排版工具，可以安裝在Xcode裡，支援Tab或Space縮排、可以存檔自動排版。</p><p>心得: 原本排版Swift的程式，應該要用Swift寫，但因為要給自己挑戰選了不熟的Objective-C，雖然沒什麼問題但寫起來真的很贅，無法支援 command line 也是一大敗筆，之後要找時間換回Swift也是一個大工程。</p><p>更多資訊可以參考 <a href="https://github.com/Jintin/Swimat" target="_blank" rel="external">https://github.com/Jintin/Swimat</a></p><h2 id="DroidLane-Groovy"><a href="#DroidLane-Groovy" class="headerlink" title="DroidLane (Groovy)"></a>DroidLane (Groovy)</h2><p>寫完了Xcode的plugin後，就開始想是不是也可以幫Android這邊也寫一個。因為自己寫太多小app，上架其實很麻煩所以就決定寫個自動上傳的工具。安裝後就不用打開瀏覽器可以在Android Studio裡直接上傳apk。</p><p>心得: Groovy其實就是Java的加強版，帶來一些好處也帶來一些缺點，我覺得最大缺點就是速度慢還要多包一些Groovy的library。</p><p>更多資訊可以參考 <a href="https://github.com/Jintin/DroidLane" target="_blank" rel="external">https://github.com/Jintin/DroidLane</a></p><h2 id="aliasme-Shell"><a href="#aliasme-Shell" class="headerlink" title="aliasme (Shell)"></a>aliasme (Shell)</h2><p>身為工程師就是要用 command line 啊，但其實大家都不喜歡打字，切換目錄的時候如果太遠其實很不方便，aliasme就是要解決這樣的需求，讓大家可以很方便的切換目錄。</p><p>範例如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ al add A ~/dirA/subA/A</span><br><span class="line">$ al add B ~/dirB/subB/B</span><br><span class="line">$ al A</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Users/Jintin/dirA/subA/A</span><br><span class="line">$ al B</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Users/Jintin/dirB/subB/B</span><br></pre></td></tr></table></figure></p><p>心得: 跟寫Objective-C一樣會感覺到時代的眼淚，如果可以用高階語言寫的就盡量用高階語言寫吧…</p><p>更多資訊可以參考 <a href="https://github.com/Jintin/aliasme" target="_blank" rel="external">https://github.com/Jintin/aliasme</a></p>]]></content>
    </entry>
    
  
  
</search>
